#!/bin/bash

# document what this next section does:
# This script sets up the environment for a Bash shell, including PATH, editor settings,
# terminal settings, and theme-switching functions. It also includes a welcome message and
# a function to start a Gendl instance with a Swank server. The script is designed to be
# sourced in an interactive shell, ensuring that it does not exit prematurely and that it
# only runs once per session.
# Check if .bash_profile has already been loaded


# Set PATH early and cleanly
export PATH="/snap/bin:$PATH"

export ALTERNATE_EDITOR=""
export EDITOR="emacsclient -t"
export VISUAL="emacsclient -c -a emacs"



# Terminal settings
export TERM="xterm-256color"
export COLORTERM="truecolor"
alias ssh='TERM=xterm-256color COLORTERM=truecolor ssh'



# Theme-switching functions (unchanged)
set_prompt_theme() {
    local theme="${1:-dark}"
    case "$theme" in
        dark)
            PS1='${debian_chroot:+($debian_chroot)}\[\033[38;2;0;255;128m\]\u@\h\[\033[0m\]:\[\033[38;2;0;191;255m\]\w\[\033[0m\]\$ '
            ;;
        light)
            PS1='${debian_chroot:+($debian_chroot)}\[\033[38;2;139;0;0m\]\u@\h\[\033[0m\]:\[\033[38;2;0;0;139m\]\w\[\033[0m\]\$ '
            ;;
        solarized)
            PS1='${debian_chroot:+($debian_chroot)}\[\033[38;2;181;137;0m\]\u@\h\[\033[0m\]:\[\033[38;2;38;139;210m\]\w\[\033[0m\]\$ '
            ;;
        custom)
            PS1='${debian_chroot:+($debian_chroot)}\[\033[38;2;255;165;0m\]\u@\h\[\033[0m\]:\[\033[38;2;147;112;219m\]\w\[\033[0m\]\$ '
            ;;
        *)
            echo "Unknown theme: $theme"
            return 1
            ;;
    esac
    export PS1
}

set_dircolors_theme() {
    local theme="${1:-dark}"
    if [ -x /usr/bin/dircolors ]; then
        local colors
        case "$theme" in
            dark)
                colors="DIR 38;2;0;191;255
FILE 38;2;255;255;255
EXEC 38;2;0;255;128
LINK 38;2;255;215;0"
                ;;
            light)
                colors="DIR 38;2;0;0;139
FILE 38;2;0;0;0
EXEC 38;2;139;0;0
LINK 38;2;0;139;139"
                ;;
            solarized)
                colors="DIR 38;2;38;139;210
FILE 38;2;147;161;161
EXEC 38;2;181;137;0
LINK 38;2;203;75;22"
                ;;
            custom)
                colors="DIR 38;2;147;112;219
FILE 38;2;245;245;220
EXEC 38;2;255;165;0
LINK 38;2;255;215;0"
                ;;
            *)
                colors=""
                ;;
        esac
        if [ -n "$colors" ]; then
            eval "$(echo "$colors" | dircolors -b -)"
        else
            eval "$(dircolors -b)"
        fi
    fi
}

theme() {
    local theme="${1:-dark}"
    local quiet=${2:-0}
    set_prompt_theme "$theme"
    set_dircolors_theme "$theme"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    case "$TERM" in
        xterm*|rxvt*)
            PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
            ;;
    esac
    if [ "$quiet" -eq 0 ]; then
        echo "Switched to $theme theme. Use theme_help for more options."
    fi
}

theme_help() {
    echo "Terminal theme switching:"
    echo "  theme dark     - Switch to dark theme"
    echo "  theme light    - Switch to light theme"
    echo "  theme solarized - Switch to solarized theme"
    echo "  theme custom   - Switch to custom theme"
}

# Interactive shell setup add conditional for setting theme and
# printing Welcome message - welcome message should be printed only
# once and a flag set so it won't be printed a second time e.g. after
# an exec.  If not interactive shell, do not exit, simply continue. 


if [[ $- == *i* && -z "$DOT_BASH_PROFILE_WELCOME" ]]; then
    # Apply default theme quietly
    theme "${THEME:-dark}" 1
    # Show welcome message
    echo ""
    echo "Welcome to the 🦖 Skewed Emacs 🦖  Bash Profile"


#     echo "Type 'e' to get a terminal-mode emacsclient on current directory."


    if [ -z "$INSIDE_EMACS" ]; then
	echo "Type 'e' to get a terminal-mode emacsclient on current directory."
    else
	echo "You appear to be inside emacs shell (${INSIDE_EMACS})."
    fi
    
    echo "Terminal Color Tip: 'theme dark|light|solarized|custom'"
    echo "Emacs Color Tip: M-x dark-theme, M-x light-theme, or M-x load-theme..."
    echo ""
    if [ -z "$SKEWED_EMACS_CONTAINER" ]; then
	echo "Use `claudly` to launch claude code."
    fi
    export DOT_BASH_PROFILE_WELCOME=1
fi


#
#FLAG -- end of conditional behavior based on interactive shell plus not already ran. 
#

# Start a Gendl instance with a Swank server
function gswank
{
    local gdl_path=${1:-"/opt/gendl/gdl/program/gdl-ccl"}
    local port=${2:-4005}
    
    if [ -e "$gdl_path" ]; then
        echo "Starting Gendl Swank server on port $port using $gdl_path"
        "$gdl_path" -e "(swank:create-server :port $port :dont-close t)" ${@:3}
    else
        echo "Error: Gendl executable not found at $gdl_path"
        echo "Usage: gswank [gdl_path] [port] [additional_args...]"
        echo "Default: gswank /opt/gendl/gdl/program/gdl-ccl 4005"
        return 1
    fi
}


function egui
{
    file=${1:-"~/."};
    emacsclient --create-frame ${file}
}


function e
{
    file=${1:-"."};
    emacsclient -nw ${file}
}

function eskew
{
    file=${1:-"/projects"};
    docker exec -it --detach-keys "ctrl-^" skewed-emacs emacsclient -t $file
}

function egskew
{
    file=${1:-"/projects"};
    docker exec -it --detach-keys "ctrl-^" skewed-emacs emacsclient -c $file & 
}


function claudly
{
    file=${1:-"."};
    docker exec -it --detach-keys "ctrl-^" lisply-mcp /home/node/.claude/local/claude --mcp-config /app/docker/mcp-config.json
}



function gendl-run-container {
    local impl="ccl"
    local offset=1
    local container_name http_host_port json_flag=""

    # Parse command-line arguments
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            --impl=*) impl="${1#*=}"; shift ;;
            --sbcl) impl="sbcl"; shift ;;
            --ccl) impl="ccl"; shift ;;
            --json|--id-only|--quiet) json_flag="$1"; shift ;;
            *) break ;;
        esac
    done

    # Helper functions
    is_verbose() { [[ "$json_flag" != "--quiet" && "$json_flag" != "--id-only" && "$json_flag" != "--json" ]]; }
    
    log_verbose() { is_verbose && echo "$@"; }
    
    format_output() {
        local cid="$1" status="${2:-ok}" message="$3"
        case "$json_flag" in
            --json)
                echo "{
  \"container_id\": \"$cid\",
  \"impl\": \"$impl\",
  \"port_swank\": $((4200 + offset)),
  \"port_http\": $((9080 + offset)),
  \"port_https\": $((9443 + offset)),
  \"port_telnet\": $((4023 + offset)),
  \"gendl_mode\": \"${GENDL_MODE:-default}\",
  \"project_mount\": \"${USER_PROJECTS:-$HOME/projects}\",
  \"status\": \"$status\"
}"
                ;;
            --id-only|--quiet)
                echo "$cid"
                ;;
            *)
                [[ -n "$message" ]] && echo "$message"
                echo "Container ID: $cid"
                ;;
        esac
    }

    is_valid_gendl_service() {
        curl -s -f "http://localhost:$1/lisply/ping-lisp" | grep -q "pong"
    }

    # Configure based on implementation
    case "$impl" in
        sbcl)
            offset=2
            container_name="gendl-sbcl"
            http_host_port=9082
            ;;
        ccl|*)
            offset=1
            container_name="gendl-ccl"
            http_host_port=9081
            ;;
    esac

    log_verbose "Using Lisp implementation: ${impl}"

    # Resolve run script path
    find_docker_run_script() {
        local paths=(
            "$HOME/.emacs.d/etc/gendl/docker/run"
            "$HOME/emacs.d/etc/gendl/docker/run"
            "$HOME/projects/gendl/docker/run"
            "/projects/gendl/docker/run"
        )
        for path in "${paths[@]}"; do
            [ -f "$path" ] || [ -L "$path" ] && echo "$path" && return 0
        done
        return 1
    }

    docker_run_script=$(find_docker_run_script) || {
        log_verbose "Error: Gendl Docker run script not found."
        return 1
    }

    log_verbose "Using docker run script: ${docker_run_script}..."

    # Check for existing container by name
    if existing_cid=$(docker ps -q --filter "name=^${container_name}$"); [ -n "$existing_cid" ]; then
        if is_valid_gendl_service "$http_host_port"; then
            format_output "$existing_cid" "existing" "Service already existing: Container ${container_name} (ID: ${existing_cid}) is running a valid Gendl service on port ${http_host_port}."
            return 1
        else
            log_verbose "Error: Container ${container_name} (ID: ${existing_cid}) exists but is not responding on port ${http_host_port}."
            return 1
        fi
    fi

    # Check if HTTP port already in use
    if ss -tln | grep -q ":${http_host_port}\b"; then
        if is_valid_gendl_service "$http_host_port"; then
            port_cid=$(docker ps --filter "publish=${http_host_port}" --format "{{.ID}}")
            format_output "${port_cid:-unknown}" "existing" "Service already existing: A valid Gendl service is running on port ${http_host_port}."
            return 1
        else
            log_verbose "Error: Port ${http_host_port} is in use by something else."
            return 1
        fi
    fi

    # Run the container
    run_output=$($docker_run_script $([ "$impl" != "ccl" ] && echo "--$impl") 2>&1)
    run_status=$?

    if [ $run_status -ne 0 ]; then
        log_verbose "Error: Failed to start container."
        is_verbose && echo "$run_output" | grep -v "Error response from daemon: No such container: Warning:"
        return 1
    fi

    # Extract container ID from output
    cid=$(echo "$run_output" | grep "Container ID is:" | tail -1 | awk '{print $NF}')
    [ -z "$cid" ] && {
        log_verbose "Error: Could not retrieve container ID."
        is_verbose && echo "$run_output" | grep -v "Error response from daemon: No such container: Warning:"
        return 1
    }

    # Symlink setup inside container
    docker exec -d "$cid" ln -s /home /Users
    docker exec -d "$cid" ln -s /home/gendl-user "$HOME"

    # Output - for new container, include the run script output in verbose mode
    local verbose_message=""
    is_verbose && verbose_message=$(echo "$run_output" | grep -v "Error response from daemon: No such container: Warning:")
    
    if [[ "$json_flag" != "--json" && "$json_flag" != "--id-only" && "$json_flag" != "--quiet" ]]; then
        echo "$verbose_message"
        format_output "$cid" "ok"
    else
        format_output "$cid" "ok"
    fi
}

function rgc {
    echo "⚠️  Warning: 'rgc' is deprecated. Use 'gendl-run-container' instead." >&2
    gendl-run-container "$@"
}


# file naming utilities.


function latest_grep {
    # Move into the logs directory
    cd ~/logs
    # Grep the logs for a pattern and extract file names, then sort them by modification time
    grep "$1" *.log | cut -d':' -f1 | xargs ls -t | head -n 1
}


kill_port() {
    if [[ -z "$1" ]]; then
        echo "Usage: kill_port <port_number>"
        return 1
    fi

    local port=$1
    echo "Attempting to kill process on port $port..."
    sudo fuser -k -n tcp $port
}



# Check if running in Bash
if [ -n "$BASH_VERSION" ]; then
    # Only proceed if .bash_profile hasn’t been loaded yet
    if [ -z "$DOT_BASH_PROFILE_LOADED" ]; then
        # Mark .bash_profile as loaded
        export DOT_BASH_PROFILE_LOADED=1

        # Source .profile if it exists and hasn’t been loaded
        if [ -f "$HOME/.profile" ] && [ -z "$DOT_PROFILE_LOADED" ]; then
            . "$HOME/.profile"
            export DOT_PROFILE_LOADED=1
        fi

        # Source .bashrc if it exists and hasn’t been loaded
        if [ -f "$HOME/.bashrc" ] && [ -z "$DOT_BASHRC_LOADED" ]; then
            . "$HOME/.bashrc"
            export DOT_BASHRC_LOADED=1
        fi
    fi
fi



if [ -f "$HOME/.local/bin/env" ]; then 
. "$HOME/.local/bin/env"
fi

if [ -f "$HOME/.private-config/dot-files/bash_profile" ]; then 
 . "$HOME/.private-config/dot-files/bash_profile"
fi
