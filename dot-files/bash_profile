#!/bin/bash

# Set flag to indicate bash_profile has been loaded
if [ -z "$DOT_BASH_PROFILE_LOADED" ]; then
    export DOT_BASH_PROFILE_LOADED=1
fi

# Set PATH early and cleanly
export PATH="/snap/bin:$PATH"

export ALTERNATE_EDITOR=""
export EDITOR="emacsclient -t"
export VISUAL="emacsclient -c -a emacs"

# Terminal settings
export TERM="xterm-256color"
export COLORTERM="truecolor"
alias ssh='TERM=xterm-256color COLORTERM=truecolor ssh'

# Theme-switching functions (unchanged)
set_prompt_theme() {
    local theme="${1:-dark}"
    case "$theme" in
        dark)
            PS1='${debian_chroot:+($debian_chroot)}\[\033[38;2;0;255;128m\]\u@\h\[\033[0m\]:\[\033[38;2;0;191;255m\]\w\[\033[0m\]\$ '
            ;;
        light)
            PS1='${debian_chroot:+($debian_chroot)}\[\033[38;2;139;0;0m\]\u@\h\[\033[0m\]:\[\033[38;2;0;0;139m\]\w\[\033[0m\]\$ '
            ;;
        solarized)
            PS1='${debian_chroot:+($debian_chroot)}\[\033[38;2;181;137;0m\]\u@\h\[\033[0m\]:\[\033[38;2;38;139;210m\]\w\[\033[0m\]\$ '
            ;;
        custom)
            PS1='${debian_chroot:+($debian_chroot)}\[\033[38;2;255;165;0m\]\u@\h\[\033[0m\]:\[\033[38;2;147;112;219m\]\w\[\033[0m\]\$ '
            ;;
        *)
            echo "Unknown theme: $theme"
            return 1
            ;;
    esac
    export PS1
}

set_dircolors_theme() {
    local theme="${1:-dark}"
    if [ -x /usr/bin/dircolors ]; then
        local colors
        case "$theme" in
            dark)
                colors="DIR 38;2;0;191;255
FILE 38;2;255;255;255
EXEC 38;2;0;255;128
LINK 38;2;255;215;0"
                ;;
            light)
                colors="DIR 38;2;0;0;139
FILE 38;2;0;0;0
EXEC 38;2;139;0;0
LINK 38;2;0;139;139"
                ;;
            solarized)
                colors="DIR 38;2;38;139;210
FILE 38;2;147;161;161
EXEC 38;2;181;137;0
LINK 38;2;203;75;22"
                ;;
            custom)
                colors="DIR 38;2;147;112;219
FILE 38;2;245;245;220
EXEC 38;2;255;165;0
LINK 38;2;255;215;0"
                ;;
            *)
                colors=""
                ;;
        esac
        if [ -n "$colors" ]; then
            eval "$(echo "$colors" | dircolors -b -)"
        else
            eval "$(dircolors -b)"
        fi
    fi
}

theme() {
    local theme="${1:-dark}"
    local quiet=${2:-0}
    set_prompt_theme "$theme"
    set_dircolors_theme "$theme"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    case "$TERM" in
        xterm*|rxvt*)
            PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
            ;;
    esac
    if [ "$quiet" -eq 0 ]; then
        echo "Switched to $theme theme."
    fi
}

theme_help() {
    echo "Terminal theme switching:"
    echo "  theme dark     - Switch to dark theme"
    echo "  theme light    - Switch to light theme"
    echo "  theme solarized - Switch to solarized theme"
    echo "  theme custom   - Switch to custom theme"
}

# Interactive shell setup
if [[ $- == *i* ]]; then
    # Apply default theme quietly
    theme "${THEME:-dark}" 1
    # Show welcome message
    echo ""
    echo "Welcome to the ðŸ¦–Skewed EmacsðŸ¦–  Bash Profile"
    echo ""
    echo "Color Tip: Use 'theme dark|light|solarized|custom' to change terminal colors."
    echo "Run 'theme_help' for more info."
    echo ""
fi


# Start a Gendl instance with a Swank server
function gswank
{
    local gdl_path=${1:-"/opt/gendl/gdl/program/gdl-ccl"}
    local port=${2:-4005}
    
    if [ -e "$gdl_path" ]; then
        echo "Starting Gendl Swank server on port $port using $gdl_path"
        "$gdl_path" -e "(swank:create-server :port $port :dont-close t)" ${@:3}
    else
        echo "Error: Gendl executable not found at $gdl_path"
        echo "Usage: gswank [gdl_path] [port] [additional_args...]"
        echo "Default: gswank /opt/gendl/gdl/program/gdl-ccl 4005"
        return 1
    fi
}


function egui
{
    file=${1:-"~/."};
    emacsclient --create-frame ${file}
}


function e
{
    file=${1:-"."};
    emacsclient -nw ${file}
}


# Run a Gendl container with specified Lisp implementation
function rgc
{
    local impl="ccl"  # Default implementation
    
    # Parse command line arguments
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            --impl=*) impl="${1#*=}"; shift ;;
            --sbcl) impl="sbcl"; shift ;;
            --ccl) impl="ccl"; shift ;;
            *) break ;;
        esac
    done
    
    echo "Using Lisp implementation: ${impl}"
    
    # Ensure gendl repo is available
    local gendl_dir="$HOME/projects/gendl"
    local docker_run_script=""
    
    if [ -d "${gendl_dir}" ]; then
        docker_run_script="${gendl_dir}/docker/run"
    else
        echo "Gendl repository not found at $HOME/projects/gendl or $gendl_dir"
        echo "Cloning into place, please stand by..."
	mkdir -p ${HOME}/projects
	cd ${HOME}/projects
	git clone https://gitlab.common-lisp.net/gendl/gendl
    fi
    
    # Run the container
    local run_output=$($docker_run_script $([ "$impl" != "ccl" ] && echo "--$impl"))
    local cid=$(echo "$run_output" | tail -1)
    
    # Setup environment in container
    docker exec -d $cid ln -s /home /Users
    docker exec -d $cid ln -s /home/gendl-user ${HOME}
    
    echo "${run_output}"
    echo "Container ID: ${cid}"
}

# file naming utilities.


function latest_grep {
    # Move into the logs directory
    cd ~/logs
    # Grep the logs for a pattern and extract file names, then sort them by modification time
    grep "$1" *.log | cut -d':' -f1 | xargs ls -t | head -n 1
}


kill_port() {
    if [[ -z "$1" ]]; then
        echo "Usage: kill_port <port_number>"
        return 1
    fi

    local port=$1
    echo "Attempting to kill process on port $port..."
    sudo fuser -k -n tcp $port
}



# Check if running in Bash
if [ -n "$BASH_VERSION" ]; then
    # Only proceed if .bash_profile hasnâ€™t been loaded yet
    if [ -z "$DOT_BASH_PROFILE_LOADED" ]; then
        # Mark .bash_profile as loaded
        export DOT_BASH_PROFILE_LOADED=1

        # Source .profile if it exists and hasnâ€™t been loaded
        if [ -f "$HOME/.profile" ] && [ -z "$DOT_PROFILE_LOADED" ]; then
            . "$HOME/.profile"
            export DOT_PROFILE_LOADED=1
        fi

        # Source .bashrc if it exists and hasnâ€™t been loaded
        if [ -f "$HOME/.bashrc" ] && [ -z "$DOT_BASHRC_LOADED" ]; then
            . "$HOME/.bashrc"
            export DOT_BASHRC_LOADED=1
        fi
    fi
fi



if [ -f "$HOME/.local/bin/env" ]; then 
. "$HOME/.local/bin/env"
fi
