#!/bin/bash
#
# This will start a Swank listening on port $SWANK_PORT and expose that to the host.
#
# So you can do M-x slime-connect to localhost on port $SWANK_PORT (e.g. 4201).
#
# Prerequisite: docker and GNU Emacs with SLIME.
#

CURRDIR=$(dirname "$0")

if [[ "$*" == *"--sbcl"* ]]; then
    impl="sbcl"
    offset=2 # Add 2 offset for each HOST_PORT for sbcl
else
    impl="ccl"
    offset=1 # Add 1 offset for each HOST_PORT for ccl
fi

# GENDL_MODE: default: Lisp stdio, mcp: JSON MCP stdio
export GENDL_MODE=${GENDL_MODE:-default}

# Customize ports
export HTTP_PORT=${HTTP_PORT:-9080}
export HTTPS_PORT=${HTTPS_PORT:-9443}
export SWANK_PORT=${SWANK_PORT:-4200}
export TELNET_PORT=${TELNET_PORT:-4023}

export HTTP_HOST_PORT=$((HTTP_PORT + offset))
export HTTPS_HOST_PORT=$((HTTPS_PORT + offset))
export SWANK_HOST_PORT=$((SWANK_PORT + offset))
export TELNET_HOST_PORT=$((TELNET_PORT + offset))

export START_HTTP=${START_HTTP:-true}
export START_HTTPS=${START_HTTPS:-false}
export START_SWANK=${START_SWANK:-true}
export START_TELNET=${START_TELNET:-false}

# Default to ~/projects if USER_PROJECTS is not set
USER_PROJECTS=${USER_PROJECTS:-$HOME/projects}

# Normalize USER_PROJECTS with realpath if it exists, otherwise use as-is
if [ -e "$USER_PROJECTS" ]; then
    USER_PROJECTS=$(realpath "$USER_PROJECTS") || {
        echo "Error: Failed to resolve USER_PROJECTS ($USER_PROJECTS)."
        exit 1
    }
fi

# Validate or create USER_PROJECTS
if [ -e "$USER_PROJECTS" ]; then
    # Ensure it's a directory
    if [ ! -d "$USER_PROJECTS" ]; then
        echo "Error: USER_PROJECTS ($USER_PROJECTS) is not a directory."
        exit 1
    fi
    
else
    # Create the directory if it doesn't exist
    echo "Creating directory at $USER_PROJECTS"
    mkdir -p "$USER_PROJECTS" || {
        echo "Error: Failed to create directory at $USER_PROJECTS"
        exit 1
    }
fi

cd "${CURRDIR}"

PROJECTS_BASENAME="projects"
HOST_USER_UID=$(id -u)
HOST_USER_NAME=${USER}
gendl_user="gendl-user"

branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null); ret_code=$?; branch=${branch//\//--}
if [ "$ret_code" -ne "0" ]; then
    branch="master"
fi

echo "impl: $impl"

# Check if something is already listening on the HTTP port
if ss -tln | grep -q ":${HTTP_HOST_PORT}\b"; then
    echo "Warning: Gendl or something else is already listening on localhost at port ${HTTP_HOST_PORT}"
    exit 1
fi

docker pull genworks/gendl:${branch}-${impl} 2> /dev/null || true

echo ""
echo "Starting container with following environmental values:"
echo ""
echo "SWANK_HOST_PORT=${SWANK_HOST_PORT}"
echo "SWANK_PORT=${SWANK_PORT}"
echo "HTTP_HOST_PORT=${HTTP_HOST_PORT}"
echo "HTTP_PORT=${HTTP_PORT}"
echo "HTTPS_HOST_PORT=${HTTPS_HOST_PORT}"
echo "HTTPS_PORT=${HTTPS_PORT}"
echo "TELNET_HOST_PORT=${TELNET_HOST_PORT}"
echo "TELNET_PORT=${TELNET_PORT}"
echo "START_SWANK=${START_SWANK}"
echo "START_HTTP=${START_HTTP}"
echo "START_HTTPS=${START_HTTPS}"
echo "START_TELNET=${START_TELNET}"
echo "USER_PROJECTS=${USER_PROJECTS}"
echo "PROJECTS_BASENAME=${PROJECTS_BASENAME}"
echo "gendl_user=${gendl_user}"
echo "GENDL_MODE=${GENDL_MODE}"

DOCKER_MOUNT_OPTIONS="--mount type=bind,src=${USER_PROJECTS},dst=/home/${gendl_user}/${PROJECTS_BASENAME}"

DOCKER_GENDL_CID=$(docker run -id --rm -h gendl --name gendl-${impl} \
                          -p ${SWANK_HOST_PORT}:${SWANK_PORT} -p ${HTTP_HOST_PORT}:${HTTP_PORT} \
                          -p ${HTTPS_HOST_PORT}:${HTTPS_PORT} \
                          -e HTTP_PORT -e HTTPS_PORT -e SWANK_PORT -e TELNET_PORT \
                          -e HTTP_HOST_PORT -e HTTPS_HOST_PORT \
                          -e SWANK_HOST_PORT -e TELNET_HOST_PORT \
                          -e START_HTTP -e START_HTTPS -e START_SWANK -e START_TELNET \
                          -e HOST_USER_UID -e GENDL_MODE \
                          ${DOCKER_MOUNT_OPTIONS} \
                          --add-host host.docker.internal:172.17.0.1 \
                          genworks/gendl:${branch}-${impl})

if [ -z "$DOCKER_GENDL_CID" ]; then
    echo ""
    echo "Container did not start successfully, perhaps a name conflict with a running container?"
    echo "Maybe try the ./stop script in this directory."
    echo ""
else
    echo ""
    echo "New container has been started and:"
    echo "${USER_PROJECTS}"
    echo "from this host has been mounted to:"
    echo "/home/${gendl_user}/${PROJECTS_BASENAME}/"
    echo "in the container."
    echo ""
    echo "The new container ID is ${DOCKER_GENDL_CID}."
    echo ""
    if [ "${START_SWANK}" != "false" ]; then
        echo "If you need SLIME loaded into your Emacs, you can get it with:"
        echo "M-x load-file RET ${GENDL_SRC}/docker/slime/slime.el RET"
        echo ""
        echo "Swank is listening on port ${SWANK_HOST_PORT} on the host,"
        echo "so you can connect from a SLIME-enabled Emacs with:"
        echo ""
        echo "M-x slime-connect RET localhost RET ${SWANK_HOST_PORT} RET"
        echo ""
    fi
    echo "Container ID is: ${DOCKER_GENDL_CID}"
fi
