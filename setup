#!/bin/bash

# Define the help function
show_help() {
    echo ""
    echo "Skewed Emacs Config Setup
    echo "========================="
    echo "This script will set up your home directory with symlinks to the configuration files"
    echo "in the repository's dot-files directory."
    echo ""
    echo "Usage: ./setup [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --help, -help, -h             Show this help message and exit"
    echo "  --dry-run, -dry-run           Show what would happen without making any changes"
    echo ""
    echo "  --shadow-suffix=NAME, -shadow-suffix=NAME     Creates symlinks with a \"-NAME\" suffix"
    echo "  --shadow-suffix NAME, -shadow-suffix NAME     (e.g., with --shadow-suffix=test creates ~/.emacs.d-test)"
    echo ""
    echo "  --shadow-suffix=shadow, -shadow-suffix=shadow Creates symlinks with a \"-shadow\" suffix"
    echo ""
    echo ""
    echo "  --shadow-suffix=\"\", -shadow-suffix=\"\"         Explicitly specifies standard installation"
    echo "  --shadow-suffix=, -shadow-suffix=             using this option is optional, as it's the default"
    echo ""
    echo "  --scrub-shadow-suffix=NAME, -scrub-shadow-suffix=NAME"
    echo "  --scrub-shadow-suffix NAME, -scrub-shadow-suffix NAME"
    echo "                                       Removes all symlinks with the \"-NAME\" suffix"
    echo ""
    echo "  --scrub-shadow-suffix=\"\", -scrub-shadow-suffix=\"\""
    echo "  --scrub-shadow-suffix=, -scrub-shadow-suffix="
    echo "                                       Removes all default symlinks without a suffix"
    echo ""
    echo "The setup script will automatically detect and replace broken symlinks and handle"
    echo "existing dotfiles by backing them up with a \"-pre-skewed-emacs\" suffix."
    echo "It also skips backup files ending with tilde \(~\) in the dot-files directory."
    echo ""
    echo "Examples:"
    echo "  # Preview changes without modifying anything"
    echo "  ./setup --dry-run"
    echo ""
    echo "  # Install configuration files with regular names"
    echo "  ./setup"
    echo ""
    echo "  # Install configuration files with \"-shadow\" suffix"
    echo "  ./setup --shadow-suffix=shadow"
    echo ""
    echo "  # Install with a custom suffix"
    echo "  ./setup --shadow-suffix=work"
    echo ""
    echo "  # Remove all symlinks with the \"-test\" suffix"
    echo "  ./setup --scrub-shadow-suffix=test"
    echo ""
    echo "  # Remove all default symlinks and create new ones with \"-work\" suffix"
    echo "  ./setup --scrub-shadow-suffix=\"\" --shadow-suffix=work"
    echo ""
    echo "⚠️ Warning: The setup script will overwrite your existing .emacs.d directory and"
    echo "several dotfiles in your home directory. Existing files will be backed up with a"
    echo "\"-pre-skewed-emacs\" suffix. Run it with --dry-run first to see what it will do"
    echo "without it touching anything."
}

# Check for help flag first
for arg in "$@"
do
    case $arg in
        --help|-help|-h)
        show_help
        exit 0
        ;;
    esac
done

echo ""
echo "Skewed Emacs Config Setup"
echo "========================="
echo "This script will set up your home directory with symlinks to the configuration files"
echo "in the repository's dot-files directory."
echo ""

# Parse command line arguments
shadow_suffix=""
dry_run=false
next_is_suffix=false
next_is_scrub_suffix=false
scrub_suffix=""

for arg in "$@"
do
    if [ "$next_is_suffix" = true ]; then
        if [ -z "$arg" ]; then
            shadow_suffix=""
        else
            shadow_suffix="-${arg}"
        fi
        next_is_suffix=false
        continue
    fi
    
    if [ "$next_is_scrub_suffix" = true ]; then
        if [ -z "$arg" ]; then
            scrub_suffix=""
        else
            scrub_suffix="-${arg}"
        fi
        next_is_scrub_suffix=false
        continue
    fi
    
    case $arg in
        --shadow-suffix=*|-shadow-suffix=*)
        suffix_value="${arg#*=}"
        if [ -z "$suffix_value" ]; then
            shadow_suffix=""
        else
            shadow_suffix="-${suffix_value}"
        fi
        shift
        ;;
        --shadow-suffix|-shadow-suffix)
        next_is_suffix=true
        shift
        ;;
        --scrub-shadow-suffix=*|-scrub-shadow-suffix=*)
        suffix_value="${arg#*=}"
        if [ -z "$suffix_value" ]; then
            scrub_suffix=""
        else
            scrub_suffix="-${suffix_value}"
        fi
        shift
        ;;
        --scrub-shadow-suffix|-scrub-shadow-suffix)
        next_is_scrub_suffix=true
        shift
        ;;

        --dry-run|-dry-run)
        dry_run=true
        shift
        ;;
    esac
done

# Determine the repo directory from the script location
SCRIPT_PATH=$(realpath "$0")
REPO_DIR=$(dirname "$SCRIPT_PATH")

# Set dot_files directory
dot_files="$REPO_DIR/dot-files/"

echo "Using repository at: $REPO_DIR"

if $dry_run; then
    echo "Running in DRY RUN mode - no changes will be made"
fi

# Handle scrub option if specified
if [ -n "$scrub_suffix" ]; then
    # Handle empty string case
    if [ "$scrub_suffix" = "" ]; then
        echo "Using empty suffix - will scrub default symlinks without any suffix"
    fi
    
    echo "Running in SCRUB MODE - will remove all symlinks with the '$scrub_suffix' suffix"
    
    # Find and remove all dotfiles with the given suffix
    found_files=false
    
    # Special handling for empty suffix - we need to be more precise
    if [ -z "$scrub_suffix" ]; then
        # For empty suffix, get the list of files in dot-files directory
        # and remove only the exact symlinks pointing to those files
        for nondot_file in $(ls "${dot_files}" | grep -v "~$"); do
            dot_file_name=".${nondot_file}"
            dot_file_path="$HOME/${dot_file_name}"
            
            # Check if the file exists and is a symlink
            if [ -h "$dot_file_path" ]; then
                # Check if it's a symlink pointing to our repository
                target=$(readlink "$dot_file_path")
                if [[ "$target" == *"$REPO_DIR/dot-files/"* ]]; then
                    found_files=true
                    if $dry_run; then
                        echo "[DRY RUN] Would remove $dot_file_path"
                    else
                        echo "Removing $dot_file_path"
                        rm "$dot_file_path"
                    fi
                fi
            fi
        done
    else
        # For non-empty suffix, use the original approach
        for dot_file in ~/.*${scrub_suffix}; do
            # Skip if no matches found (when the glob pattern itself is returned)
            if [ "$dot_file" = "~/.*${scrub_suffix}" ]; then
                continue
            fi
            
            found_files=true
            # Only remove if it's a symlink
            if [ -h "$dot_file" ]; then
                base_name=$(basename "$dot_file")
                if $dry_run; then
                    echo "[DRY RUN] Would remove $dot_file"
                else
                    echo "Removing $dot_file"
                    rm "$dot_file"
                fi
            else
                echo "Skipping $dot_file (not a symlink)"
            fi
        done
    fi
    
    if [ "$found_files" = false ]; then
        echo "No dotfiles with '$scrub_suffix' suffix found."
    fi
    
    if $dry_run; then
        echo ""
        echo "DRY RUN scrubbing complete. No changes were made."
        echo "Run without --dry-run to apply changes."
    else
        echo ""
        echo "Scrubbing complete! All symlinks with '$scrub_suffix' suffix have been removed."
    fi
    echo ""
    if [ -n "$shadow_suffix" ]; then
        echo "Continuing with shadow installation..."
    else
        exit 0  # Only exit if we're not also doing a shadow installation
    fi
fi

# Only show SHADOW MODE message if shadow_suffix was explicitly set and not empty
if [[ "$@" == *"--shadow-suffix"* || "$@" == *"-shadow-suffix"* ]]; then
    if [ -n "$shadow_suffix" ]; then
        echo "Running in SHADOW MODE - will create symlinks with the '$shadow_suffix' suffix"
        echo "For example, ~/.emacs.d$shadow_suffix instead of ~/.emacs.d"
    fi
fi

# Inform about combined operations
if [ -n "$scrub_suffix" ] && [ -n "$shadow_suffix" ]; then
    echo "Will first scrub symlinks with '$scrub_suffix' suffix, then create new ones with '$shadow_suffix' suffix"
fi

# Safety check for identical suffixes
same_suffix_operation=false
if [ "$scrub_suffix" = "$shadow_suffix" ] && [ -n "$scrub_suffix" ]; then
    same_suffix_operation=true
    echo "Note: Scrubbing and creating symlinks with the same suffix '$scrub_suffix'"
    echo "This will remove all existing symlinks before creating new ones"
fi


# Check prerequisites and redirect errors
for prereq in emacs docker git
do
   if ! command -v ${prereq} >/dev/null 2>&1; then
     echo >&2 "Prerequisite program ${prereq} is not installed. Proceeding, but your environment might not function correctly."
   fi
done

# Make sure realpath is available
if ! command -v realpath >/dev/null 2>&1; then
  # Fall back to readlink -f which works similar to realpath on many systems
  realpath() {
    readlink -f "$1"
  }
  echo >&2 "Note: Using readlink -f instead of realpath"
fi

# Check for Node.js 22+
if command -v node >/dev/null 2>&1; then
    node_version=$(node --version | cut -d 'v' -f 2 | cut -d '.' -f 1)
    if [ "$node_version" -lt 22 ]; then
        echo >&2 "WARNING: Node.js version $node_version detected. Version 22+ is recommended for Copilot and AI integrations."
    fi
else
    echo >&2 "WARNING: Node.js is not installed. Version 22+ is required for Copilot and AI integrations."
fi


# Check for Emacs 29+
emacs_ver=$(emacs --version | sed -n 1p | awk '{print $3}' | awk -F. '{print $1}' )
if [ "$emacs_ver" -lt 29 ]; then
    echo >&2 "WARNING: Emacs version $emacs_ver detected. Version 29+ is recommended for optimal functionality."
    echo >&2 "         Some features may not work correctly with older versions."
fi


echo ""

# Make sure dot_files directory exists
if [ ! -d "$dot_files" ]; then
    echo >&2 "ERROR: Could not find dot-files directory at $dot_files"
    echo >&2 "Please ensure you're running this script from the root of the skewed-emacs repository."
    exit 1
fi

echo ""

for nondot_file in $(ls "${dot_files}")
do
        nondot_file=$(basename "${nondot_file}")
        
        # Skip backup files ending with ~
        if [[ "$nondot_file" == *~ ]]; then
            echo "Skipping backup file $nondot_file"
            continue
        fi

        echo "Processing $nondot_file from repository dot-files directory."

        dot_file=.${nondot_file}
        target_file="${dot_file}${shadow_suffix}"

        # Check if target file is already correctly linked
        if [ "$same_suffix_operation" = true ] && $dry_run; then
            # In dry run with same suffix for scrub and shadow, we would have removed it first
            echo "[DRY RUN] Would create symlink from ~/${target_file} to ${dot_files}${nondot_file}"
            continue
        elif [ -e ~/${target_file} ] && [ -h ~/${target_file} ] && [ "$(realpath "$(readlink ~/${target_file})" 2>/dev/null)" = "$(realpath "${dot_files}${nondot_file}" 2>/dev/null)" ]; then
            if [ "$same_suffix_operation" = true ]; then
                if $dry_run; then
                    echo "[DRY RUN] Would recreate symlink from ~/${target_file} to ${dot_files}${nondot_file}"
                else
                    # Remove and recreate the symlink for same suffix operations
                    rm ~/${target_file}
                    ln -s "${dot_files}${nondot_file}" ~/${target_file}
                    echo "Recreated symlink from ~/${target_file} to ${dot_files}${nondot_file}"
                fi
            else
                echo "${target_file} is already linked correctly."
            fi
            continue
        fi
        
        # Handle existing target file
        backup_file=${target_file}-pre-skewed-emacs
        if [ -e ~/${target_file} ]; then
            if [ -e ~/${backup_file} ] && [ ! -h ~/${target_file} ]; then
                echo "ERROR - this script will not do anything for your ~/${target_file} because it and ~/${backup_file} both exist."
                echo "To resolve this issue, you have a few options:"
                echo "  1. Move or delete ~/${backup_file} if it's no longer needed"
                echo "  2. Move ~/${target_file} to a different location"
                echo "  3. Use a different suffix with --shadow-suffix=NAME"
                exit 1
            fi
            
            if [ -h ~/${target_file} ]; then
                target=$(readlink ~/${target_file})
                target_realpath=$(realpath "$target" 2>/dev/null)
                correct_target_realpath=$(realpath "${dot_files}${nondot_file}" 2>/dev/null)
                
                # Check if symlink points to wrong location or is broken
                if [ "$target_realpath" != "$correct_target_realpath" ] || [ ! -e "$target" ]; then
                    symlink_status="pointing to wrong location"
                    if [ ! -e "$target" ]; then
                        symlink_status="broken"
                    fi
                    
                    if $dry_run; then
                        echo "[DRY RUN] Would move existing symlink ~/${target_file} ($symlink_status, currently pointing to $target) to ~/${backup_file}"
                    else
                        echo "Moving existing symlink ~/${target_file} ($symlink_status, currently pointing to $target) to ~/${backup_file}..."
                        # Remove existing backup file if it exists
                        if [ -e ~/${backup_file} ]; then
                            rm -rf ~/${backup_file}
                        fi
                        mv ~/${target_file} ~/${backup_file}
                    fi
                fi
            else
                # Regular file
                if $dry_run; then
                    echo "[DRY RUN] Would move ~/${target_file} to ~/${backup_file}"
                else
                    echo "Moving ~/${target_file} to ~/${backup_file}..."
                    if [ -e ~/${backup_file} ]; then
                        rm -rf ~/${backup_file}
                    fi
                    mv ~/${target_file} ~/${backup_file}
                fi
            fi
        fi

        # Create the new symlink
        if [ ! -e ~/${target_file} ]; then
            if $dry_run; then
                echo "[DRY RUN] Would create symlink from ~/${target_file} to ${dot_files}${nondot_file}"
            else
                echo "Creating symlink from ~/${target_file} to ${dot_files}${nondot_file}"
                ln -s "${dot_files}${nondot_file}" ~/${target_file}
            fi
        fi
        
        echo ""
done



if $dry_run; then
    echo ""
    echo "DRY RUN complete. No changes were made."
    echo "Run without --dry-run to apply changes."
else
    echo ""
    echo "Setup complete! Configuration files have been linked from $REPO_DIR"
    echo ""
    echo "Next steps:"
    if [[ "$@" == *"--shadow-suffix"* || "$@" == *"-shadow-suffix"* ]] && [ -n "$shadow_suffix" ]; then
        echo "  Shadow installation mode:"
        echo "  - To use the shadow configuration for Emacs: emacs -q --load \"~/.emacs.d${shadow_suffix}/init.el\""
        echo "  - To source the shadow bash profile: source \"~/.bash_profile${shadow_suffix}\""
    else
        echo "  Standard installation mode:"
        echo "  - Run 'killall -9 emacs emacs-gtk' to force emacs daemon to restart"
        echo "  - Log out and back in to your login shell, or run 'source ~/.bash_profile'"
        echo "  - Restart your terminal to ensure all configurations are properly loaded"
    fi
fi
