#!/bin/bash
# Docker Compose Management Script for Skewed Emacs + Gendl Development Environment
# Dr. Frankenstein'd together from existing run scripts with enhanced compose orchestration

set -e

cd "$(dirname "$0")"

export DOCKER_CONFIG=~/.docker

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
COMPOSE_FILE="${SCRIPT_DIR}/docker-compose.yml"

# Find all .yml files in the current directory, excluding docker-compose.yml
COMPOSE_FILES=("$COMPOSE_FILE")
while IFS= read -r file; do
    if [[ "$file" != "$COMPOSE_FILE" ]]; then
        COMPOSE_FILES+=("$file")
    fi
done < <(find "$SCRIPT_DIR" -maxdepth 1 -type f -name "*.yml")

# Build the Docker Compose command with all .yml files
COMPOSE_FILES_ARGS=()
for file in "${COMPOSE_FILES[@]}"; do
    COMPOSE_FILES_ARGS+=("-f" "$file")
done

if [ "$1" = "up" ]; then
    ${SCRIPT_DIR}/generate-env.sh
fi

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() { printf "%b\n" "${BLUE}[INFO]${NC} $1"; }
log_success() { printf "%b\n" "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { printf "%b\n" "${YELLOW}[WARNING]${NC} $1"; }
log_error() { printf "%b\n" "${RED}[ERROR]${NC} $1"; }

# Check if docker compose is available
check_docker_compose() {
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed or not in PATH"
        exit 1
    fi

    if docker compose version &> /dev/null; then
        COMPOSE_CMD="docker compose"
    elif docker-compose version &> /dev/null; then
        COMPOSE_CMD="docker-compose"
    else
        log_error "Neither 'docker compose' nor 'docker-compose' is available"
        exit 1
    fi

    log_info "Using: $COMPOSE_CMD"
    log_info "Compose files: ${COMPOSE_FILES[*]}"
}

# Initialize environment
init_env() {
    # Export environment variables for Docker Compose
    export HOME="${HOME}"
    export PROJECTS_DIR="${HOME}/projects"

    # Dynamically detect Docker group ID
    if [ -S "/var/run/docker.sock" ]; then
        export DOCKER_GROUP_ID=$(stat -c '%g' /var/run/docker.sock)
        log_info "Detected Docker group ID: $DOCKER_GROUP_ID"
    else
        export DOCKER_GROUP_ID=999
        log_warning "Docker socket not found, using default group ID: $DOCKER_GROUP_ID"
    fi

    if [ ! -f "${SCRIPT_DIR}/.env" ] && [ -f "${SCRIPT_DIR}/.env.example" ]; then
        log_info "Creating .env from .env.example"
        cp "${SCRIPT_DIR}/.env.example" "${SCRIPT_DIR}/.env"
        log_success "Created .env file - please customize as needed"
    fi

    # Ensure projects directory exists
    PROJECTS_DIR="${PROJECTS_DIR:-${HOME}/projects}"
    if [ ! -d "$PROJECTS_DIR" ]; then
        log_info "Creating projects directory: $PROJECTS_DIR"
        mkdir -p "$PROJECTS_DIR"
    fi
}

# Show usage
show_help() {
    cat << EOF
Docker Compose Management for Skewed Emacs + Gendl Development Environment

USAGE:
    $0 <command> [options]

COMMANDS:
    up [service...]     Start services (default: all services)
    down               Stop and remove all services
    restart [service]  Restart service(s)
    stop [service]     Stop service(s) without removing
    logs [service]     Show logs for service(s)
    status             Show status of all services
    ps                 Show running containers
    shell <service>    Open shell in service container
    emacs              Connect to Emacs via emacsclient
    slime              Show SLIME connection info
    test               Test HTTP APIs
    pull               Pull latest images
    clean              Remove containers, networks, and images
    init               Initialize environment (.env setup)
    config             Show merged Docker Compose configuration

SERVICES:
    skewed-emacs       Skewed Emacs container (HTTP API on port 7081)
    gendl              Gendl container (HTTP API on port 9081, SWANK on port 4201)
    genworks-gdl       Genworks GDL container (HTTP API on port 9089, SWANK on port 4209) [optional]
    lisply-mcp         Node.js development container (ports 3001, 8081, 9001)

EXAMPLES:
    $0 up                    # Start all services
    $0 up skewed-emacs       # Start only skewed-emacs
    $0 logs gendl            # Show gendl logs
    $0 shell skewed-emacs    # Open shell in skewed-emacs container
    $0 emacs                 # Connect to Emacs interactively
    $0 test                  # Test HTTP APIs
    $0 slime                 # Show SLIME connection instructions
    $0 config                # Show merged configuration

ENVIRONMENT:
    Customize settings by editing .env file (created from .env.example)
    Additional .yml files in the current directory are automatically included.

    Key variables:
        PROJECTS_DIR           Projects directory to mount (default: ~/projects)
        EMACS_HTTP_HOST_PORT   Emacs API port (default: 7081)
        GENDL_HTTP_HOST_PORT   Gendl API port (default: 9081)
        GENDL_SWANK_HOST_PORT  Gendl SWANK port (default: 4201)
        GDL_HTTP_HOST_PORT     Genworks GDL API port (default: 9089)
        GDL_SWANK_HOST_PORT    Genworks GDL SWANK port (default: 4209)

NETWORK:
    Services communicate via Docker network 'skewed-emacs-network'
    - From host: localhost:<host-port>
    - Inter-container: <service-hostname>:<container-port>

EOF
}

# Service management
start_services() {
    local services="$*"
    init_env

    if [ -z "${NO_PULL}" ]; then
        pull_images
    fi

    log_info "Starting services: ${services:-all}"
    $COMPOSE_CMD "${COMPOSE_FILES_ARGS[@]}" up -d $services

    printf "\n"
    printf "Use \`eskew\` for a terminal emacsclient,\n"
    printf " or \`egskew\` for a graphical one.\n"
    printf "\n"
}

stop_services() {
    log_info "Stopping all services"
    $COMPOSE_CMD "${COMPOSE_FILES_ARGS[@]}" down
}

restart_services() {
    local services="$*"
    log_info "Restarting services: ${services:-all}"
    $COMPOSE_CMD "${COMPOSE_FILES_ARGS[@]}" restart $services
}

show_logs() {
    local services="$*"
    $COMPOSE_CMD "${COMPOSE_FILES_ARGS[@]}" logs -f $services
}

show_status() {
    log_info "Service status:"
    $COMPOSE_CMD "${COMPOSE_FILES_ARGS[@]}" ps
}

open_shell() {
    local service="$1"
    if [ -z "$service" ]; then
        log_error "Please specify a service: skewed-emacs, gendl, genworks-gdl, or lisply-mcp"
        exit 1
    fi

    log_info "Opening shell in $service container"
    $COMPOSE_CMD "${COMPOSE_FILES_ARGS[@]}" exec "$service" /bin/bash
}

connect_emacs() {
    log_info "Connecting to Emacs via emacsclient"
    $COMPOSE_CMD "${COMPOSE_FILES_ARGS[@]}" exec skewed-emacs emacsclient -t
}

test_apis() {
    log_info "Testing HTTP APIs..."

    # Test skewed-emacs API
    printf "Skewed Emacs API (port %s): " "${EMACS_HTTP_HOST_PORT:-7081}"
    if curl -s -f "http://localhost:${EMACS_HTTP_HOST_PORT:-7081}/lisply/ping-lisp" > /dev/null 2>&1; then
        printf "%b\n" "${GREEN}OK${NC}"
    else
        printf "%b\n" "${RED}FAILED${NC}"
    fi

    # Test Gendl API
    printf "Gendl API (port %s): " "${GENDL_HTTP_HOST_PORT:-9081}"
    if curl -s -f "http://localhost:${GENDL_HTTP_HOST_PORT:-9081}/lisply/ping-lisp" > /dev/null 2>&1; then
        printf "%b\n" "${GREEN}OK${NC}"
    else
        printf "%b\n" "${RED}FAILED${NC}"
    fi

    # Test Genworks GDL API (if present)
    if $COMPOSE_CMD "${COMPOSE_FILES_ARGS[@]}" ps -q genworks-gdl > /dev/null 2>&1; then
        printf "Genworks GDL API (port %s): " "${GDL_HTTP_HOST_PORT:-9089}"
        if curl -s -f "http://localhost:${GDL_HTTP_HOST_PORT:-9089}/lisply/ping-lisp" > /dev/null 2>&1; then
            printf "%b\n" "${GREEN}OK${NC}"
        else
            printf "%b\n" "${RED}FAILED${NC}"
        fi
    fi

    # Test Gendl SWANK
    printf "Gendl SWANK (port %s): " "${GENDL_SWANK_HOST_PORT:-4201}"
    if timeout 2 bash -c "echo '' | nc localhost ${GENDL_SWANK_HOST_PORT:-4201}" > /dev/null 2>&1; then
        printf "%b\n" "${GREEN}OK${NC}"
    else
        printf "%b\n" "${RED}FAILED${NC}"
    fi

    # Test Genworks GDL SWANK (if present)
    if $COMPOSE_CMD "${COMPOSE_FILES_ARGS[@]}" ps -q genworks-gdl > /dev/null 2>&1; then
        printf "Genworks GDL SWANK (port %s): " "${GDL_SWANK_HOST_PORT:-4209}"
        if timeout 2 bash -c "echo '' | nc localhost ${GDL_SWANK_HOST_PORT:-4209}" > /dev/null 2>&1; then
            printf "%b\n" "${GREEN}OK${NC}"
        else
            printf "%b\n" "${RED}FAILED${NC}"
        fi
    fi
}

show_slime_info() {
    cat << EOF

${BLUE}SLIME Connection Information:${NC}

${GREEN}From Host Emacs (Gendl):${NC}
    M-x slime-connect RET localhost RET ${GENDL_SWANK_HOST_PORT:-4201} RET

${GREEN}From Host Emacs (Genworks GDL, if running):${NC}
    M-x slime-connect RET localhost RET ${GDL_SWANK_HOST_PORT:-4209} RET

${GREEN}From Emacs Container (Gendl):${NC}
    M-x slime-connect RET gendl RET 4200 RET

${GREEN}From Emacs Container (Genworks GDL, if running):${NC}
    M-x slime-connect RET genworks-gdl RET 4208 RET

${GREEN}Connection Test:${NC}
    $0 test

${GREEN}Alternative Access:${NC}
    # Direct container shell access
    $0 shell gendl
    $0 shell genworks-gdl

    # Emacs interactive access
    $0 emacs

EOF
}

# Update output functions
show_emacs_info() {
    printf "%b\n" "${GREEN}Skewed Emacs Service Started:${NC}"
    printf "    HTTP API: http://localhost:${EMACS_HTTP_HOST_PORT:-7081}/lisply/ping-lisp\n"
    printf "    Connect:  %s emacs\n" "$0"
    printf "    Shell:    %s shell skewed-emacs\n" "$0"
    printf "\n"
}

show_gendl_info() {
    printf "%b\n" "${GREEN}Gendl Service Started:${NC}"
    printf "    HTTP API: http://localhost:${GENDL_HTTP_HOST_PORT:-9081}/lisply/ping-lisp\n"
    printf "    SWANK:    localhost:${GENDL_SWANK_HOST_PORT:-4201} (for SLIME)\n"
    printf "    Shell:    %s shell gendl\n" "$0"
    printf "\n"
}

show_genworks_gdl_info() {
    printf "%b\n" "${GREEN}Genworks GDL Service Started:${NC}"
    printf "    HTTP API: http://localhost:${GDL_HTTP_HOST_PORT:-9089}/lisply/ping-lisp\n"
    printf "    SWANK:    localhost:${GDL_SWANK_HOST_PORT:-4209} (for SLIME)\n"
    printf "    Shell:    %s shell genworks-gdl\n" "$0"
    printf "\n"
}

pull_images() {
    log_info "Pulling latest images"
    $COMPOSE_CMD "${COMPOSE_FILES_ARGS[@]}" pull
}

clean_all() {
    log_warning "This will remove containers, networks, and unused images"
    read -p "Are you sure? (y/N): " -n 1 -r
    printf "\n"
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log_info "Cleaning up..."
        $COMPOSE_CMD "${COMPOSE_FILES_ARGS[@]}" down --rmi local --volumes --remove-orphans
        docker system prune -f
        log_success "Cleanup complete"
    else
        log_info "Cleanup cancelled"
    fi
}

show_config() {
    log_info "Showing merged Docker Compose configuration"
    $COMPOSE_CMD "${COMPOSE_FILES_ARGS[@]}" config
}

# Main command dispatcher
main() {
    check_docker_compose

    case "${1:-help}" in
        up)
            shift
            start_services "$@"
            if [ -z "$services" ] || [[ "$services" =~ "skewed-emacs" ]]; then
                show_emacs_info
            fi
            if [ -z "$services" ] || [[ "$services" =~ "gendl" ]]; then
                show_gendl_info
            fi
            if [ -z "$services" ] || [[ "$services" =~ "genworks-gdl" ]]; then
                show_genworks_gdl_info
            fi
            ;;
        down)
            stop_services
            ;;
        restart)
            shift
            restart_services "$@"
            ;;
        stop)
            shift
            $COMPOSE_CMD "${COMPOSE_FILES_ARGS[@]}" stop "$@"
            ;;
        logs)
            shift
            show_logs "$@"
            ;;
        status|ps)
            show_status
            ;;
        shell)
            open_shell "$2"
            ;;
        emacs)
            connect_emacs
            ;;
        slime)
            show_slime_info
            ;;
        test)
            test_apis
            ;;
        pull)
            pull_images
            ;;
        clean)
            clean_all
            ;;
        init)
            init_env
            log_success "Environment initialized"
            ;;
        config)
            show_config
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            log_error "Unknown command: $1"
            printf "Use '%s help' for usage information\n" "$0"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
