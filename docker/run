#!/bin/bash
# Consolidated run script for Skewed Emacs Docker container
# Compatible with lisply-mcp port handling

# Default values - avoid conflicts with host services
# Get branch name for image tag (same logic as build script)
if [ -z "${IMAGE_TAG}" ]; then
    if [ -z "${CI_COMMIT_REF_NAME}" ]; then
        # Try to get branch from git
        if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
            IMAGE_TAG=$(git rev-parse --abbrev-ref HEAD)
            # Replace forward slashes with double hyphens for docker tag compatibility
            IMAGE_TAG=${IMAGE_TAG//\/\/\//--}
        else
            IMAGE_TAG="latest"
        fi
    else
        IMAGE_TAG=${CI_COMMIT_REF_NAME//\/\/\//--}
    fi
fi
CONTAINER_NAME="${CONTAINER_NAME:-skewed-emacs}"
HTTP_PORT="${HTTP_PORT:-7080}"              # Internal container port
# Compute default HTTP_HOST_PORT as HTTP_PORT + 1 if not set
if [ -z "${HTTP_HOST_PORT}" ]; then
    HTTP_HOST_PORT=$((HTTP_PORT + 1))         # External host port (offset to avoid conflicts)
fi
START_HTTP="${START_HTTP:-true}"
START_SWANK="${START_SWANK:-false}"
SWANK_PORT="${SWANK_PORT:-4200}"
DOCKER_NETWORK=""
RUN_MODE="interactive"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    -t|--tag)
      IMAGE_TAG="$2"
      shift 2
      ;;
    -n|--name)
      CONTAINER_NAME="$2"
      shift 2
      ;;
    --http-port)
      HTTP_PORT="$2"
      shift 2
      ;;
    --http-host-port|-p|--port)
      HTTP_HOST_PORT="$2"
      shift 2
      ;;
    --network)
      DOCKER_NETWORK="emacs-gendl-network"
      RUN_MODE="detached"
      shift
      ;;
    --network-name)
      DOCKER_NETWORK="$2"
      RUN_MODE="detached"
      shift 2
      ;;
    -d|--detached)
      RUN_MODE="detached"
      shift
      ;;
    -h|--help)
      echo "Usage: $0 [OPTIONS]"
      echo "Options:"
      echo "  -t, --tag TAG               Image tag to run (default: dev)"
      echo "  -n, --name NAME             Container name (default: skewed-emacs)"
      echo "  --http-port PORT            Internal HTTP port (default: 7080)"
      echo "  --http-host-port PORT       Host HTTP port (default: 7080)"
      echo "  -p, --port PORT             Alias for --http-host-port"
      echo "  --network                   Join emacs-gendl-network and run detached"
      echo "  --network-name NAME         Join specified network and run detached"
      echo "  -d, --detached              Run in detached mode"
      echo "  -h, --help                  Show this help message"
      echo ""
      echo "Environment variables (override defaults):"
      echo "  HTTP_PORT                   Internal container port (default: 7080)"
      echo "  HTTP_HOST_PORT              External host port (default: HTTP_PORT + 1)"
      echo "  START_HTTP                  Start HTTP service (default: true)"
      echo "  START_SWANK                 Start SWANK service (default: false)"
      echo "  IMAGE_TAG                   Docker image tag (default: auto-detected from git branch)"
      echo ""
      echo "The container will:"
      echo "  - Mount ~/projects as /projects (if available)"
      echo "  - Present a clean Emacs Lisp REPL on stdin/stdout (interactive mode)"
      echo "  - Start HTTP API on port ${HTTP_PORT} (internal) -> ${HTTP_HOST_PORT} (host)"
      echo "  - Use HTTP_PORT + 1 as default host port to avoid conflicts"
      echo "  - Compatible with lisply-mcp port handling"
      echo ""
      exit 0
      ;;
    *)
      echo "Unknown option $1"
      exit 1
      ;;
  esac
done

# Stop and remove existing container if it exists
if docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
    echo "Stopping and removing existing container: ${CONTAINER_NAME}"
    docker stop ${CONTAINER_NAME} 2>/dev/null || true
    docker rm ${CONTAINER_NAME} 2>/dev/null || true
fi

echo "Starting Skewed Emacs container..."
echo "  Image: genworks/skewed-emacs:${IMAGE_TAG}"
echo "  Container name: ${CONTAINER_NAME}"
echo "  HTTP API: localhost:${HTTP_HOST_PORT} -> container:${HTTP_PORT}"
echo "  HTTP Service: ${START_HTTP}"
echo "  SWANK Service: ${START_SWANK}"
echo "  Run mode: ${RUN_MODE}"

# Check if ~/projects exists and set up mount accordingly
MOUNT_OPTIONS=""
if [ -d "$HOME/projects" ]; then
    echo "  Projects mount: $HOME/projects -> /projects"
    MOUNT_OPTIONS="-v $HOME/projects:/projects"
else
    echo "  Projects mount: /projects (empty directory - ~/projects not found)"
fi

# Mount Claude Code credentials if they exist
CLAUDE_CREDS_FILE="$HOME/.claude/.credentials.js"
CLAUDE_CONFIG_DIR="$HOME/.config/claude-code"
if [ -f "$CLAUDE_CREDS_FILE" ]; then
    echo "  Claude credentials: $CLAUDE_CREDS_FILE -> /home/emacs-user/.claude/.credentials.js"
    MOUNT_OPTIONS="$MOUNT_OPTIONS -v $HOME/.claude:/home/emacs-user/.claude:ro"
elif [ -d "$CLAUDE_CONFIG_DIR" ]; then
    echo "  Claude Code config: $CLAUDE_CONFIG_DIR -> /home/emacs-user/.config/claude-code"
    MOUNT_OPTIONS="$MOUNT_OPTIONS -v $CLAUDE_CONFIG_DIR:/home/emacs-user/.config/claude-code:ro"
elif [ -f "$HOME/.claude-code" ]; then
    echo "  Claude Code config: $HOME/.claude-code -> /home/emacs-user/.claude-code"
    MOUNT_OPTIONS="$MOUNT_OPTIONS -v $HOME/.claude-code:/home/emacs-user/.claude-code:ro"
else
    echo "  Claude Code config: Not found (user will need to login in container)"
fi

# Set up network options
NETWORK_OPTIONS=""
if [ -n "$DOCKER_NETWORK" ]; then
    echo "  Docker network: ${DOCKER_NETWORK}"
    # Create network if it doesn't exist
    if ! docker network ls --format '{{.Name}}' | grep -q "^${DOCKER_NETWORK}$"; then
        echo "  Creating Docker network: ${DOCKER_NETWORK}"
        docker network create ${DOCKER_NETWORK}
    fi
    NETWORK_OPTIONS="--network ${DOCKER_NETWORK}"
fi

# Set run mode options
if [ "$RUN_MODE" = "detached" ]; then
    RUN_OPTIONS="-d --rm"
    echo "  Access with: docker exec -it ${CONTAINER_NAME} emacsclient -t"
else
    RUN_OPTIONS="-it --rm"
fi

# Build environment variables for container (consistent with lisply-mcp)
ENV_OPTIONS="-e HTTP_PORT=${HTTP_PORT} -e HTTP_HOST_PORT=${HTTP_HOST_PORT} -e START_HTTP=${START_HTTP} -e START_SWANK=${START_SWANK} -e SWANK_PORT=${SWANK_PORT}"

# Run the container with proper port mapping
echo "  Command: docker run ${RUN_OPTIONS} --name ${CONTAINER_NAME} -p ${HTTP_HOST_PORT}:${HTTP_PORT} ${ENV_OPTIONS} ${NETWORK_OPTIONS} ${MOUNT_OPTIONS} genworks/skewed-emacs:${IMAGE_TAG}"
echo ""

docker run ${RUN_OPTIONS} \
    --name ${CONTAINER_NAME} \
    -p ${HTTP_HOST_PORT}:${HTTP_PORT} \
    ${ENV_OPTIONS} \
    ${NETWORK_OPTIONS} \
    ${MOUNT_OPTIONS} \
    -e DISPLAY=$DISPLAY \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    genworks/skewed-emacs:${IMAGE_TAG}

if [ "$RUN_MODE" = "detached" ]; then
    echo "Container started successfully."
    echo "HTTP API available at: http://localhost:${HTTP_HOST_PORT}/lisply/ping-lisp"
    echo "Connect with: docker exec -it ${CONTAINER_NAME} emacsclient -t"
else
    echo "Container exited."
fi
